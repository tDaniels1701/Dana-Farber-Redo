import pandas as pd
import numpy as np
import pathlib

######## Get File Path##################
VLMS_DATA_PATH = pathlib.Path(__file__, "/vlms-data").resolve()
CENSUS_DATA_PATH = pathlib.Path(__file__, "/census-data").resolve()
vlms_raw_data = VLMS_DATA_PATH.joinpath(
    "VLMS_Entires--Dana-Farber--All-Time--20250108.csv"
)
census_raw_data = CENSUS_DATA_PATH.joinpath("state_and_county_fips_master.csv")
############ Constant Lists############
columns_to_exclude = [
    "studentName",
    "userGraduationYear",
    "rotationPeriod",
    "preceptorName",
    "codeType",
    "ID",
    "institutionID",
    "type",
    "googleID",
    "addressSubpremise",
    "addressNeighborhood",
    "userCreated",
    "dateCreated",
    "dateModified",
]
county_list = [
    "Tazewell County",
    "Galax City County",
    "Hampton City County",
    "Lynchburg City County",
    "Manassas City County",
    "Newport News City County",
    "Norfolk City County",
    "Portsmouth City County",
    "Radford City County",
    "St. Louis City County",
    "Staunton City County",
    "Virginia Beach City County",
    "District of Columbia County",
]
rotation_drop = [
    "Standardized Patient",
    "Clinical Procedural Skills",
    "High Fidelity Simulation",
    "Anatomy Lab (OMS I)",
    "CREDO Development",
]

######### Read CSV DATA ########################
df = pd.read_csv(
    vlms_raw_data, usecols=lambda x: x not in columns_to_exclude, low_memory=False
)
fips = pd.read_csv(census_raw_data, names=["fips", "addressCounty", "addressState"])
get_localities = (
    df[["addressLocality", "addressCounty", "addressState"]][
        ~df["addressCounty"].isna()
    ]
    .dropna()
    .drop_duplicates()
)

################## Clean VLMS ####################
get_nan_localities = (
    df[["addressLocality", "addressState"]][df["addressCounty"].isna()]
    .dropna()
    .drop_duplicates()
)

local_rep = get_localities[
    get_localities["addressLocality"].isin(list(get_nan_localities["addressLocality"]))
]

list_mia = sorted(
    list(
        set(get_nan_localities["addressLocality"])
        - set(list(local_rep["addressLocality"]))
    )
)

county_mia = get_nan_localities[
    get_nan_localities["addressLocality"].isin(list_mia)
].sort_values(by="addressLocality")
county_mia["addressCounty"] = county_list

county_replacement = pd.concat([county_mia, local_rep])
df.fillna(county_replacement["addressCounty"])

result = pd.merge(
    df, county_replacement, how="left", on=["addressLocality", "addressState"]
)
result["addressCounty_x"] = result["addressCounty_x"].fillna(result["addressCounty_y"])
result.drop(["addressCounty_y"], inplace=True, axis=1)
result.rename(columns={"addressCounty_x": "addressCounty"}, inplace=True)
result = result.drop_duplicates(subset="recordID", keep="first")
result = result.dropna(subset=["geoLongitude"])
result_sorted = result.sort_values("entryLoggedAt")
result_sorted["entryDate"] = result_sorted["entryLoggedAt"].str.split().str[0]
new_df = result_sorted[~result_sorted["rotationType"].isin(rotation_drop)]

####################summary######################
summary = new_df.groupby(
    ["entryDate", "code", "codeDescription", "addressCounty"], as_index=False
)["code"].value_counts()
summary.to_csv("County Counts Cancer Dated.csv", index=False)
summary_county = new_df.groupby(
    [
        "code",
        "codeDescription",
        "addressCounty",
        "addressState",
        "patientAge",
        "patientSex",
    ],
    as_index=False,
)["code"].value_counts()
summary_county.to_csv("County Counts Cancer.csv", index=False)

###############Clean Fips###########
fips["addressCounty"] = fips["addressCounty"].str.replace("city", "City County")
fips["addressCounty"] = fips["addressCounty"].str.replace(
    "Anchorage Municipality", "Anchorage"
)
fips["addressCounty"] = fips["addressCounty"].str.replace(
    "District of Columbia", "District of Columbia County"
)

######### Final Data ###########
final = pd.merge(new_df, fips, how="left", on=["addressCounty", "addressState"])
final.loc[
    (final["addressLocality"] == "Danville") & (final["addressState"] == "VA"),
    "addressCounty",
] = final.loc[
    (final["addressLocality"] == "Danville") & (final["addressState"] == "VA"),
    "addressCounty",
].fillna(
    "Danville City County"
)
final.loc[
    (final["addressLocality"] == "Danville") & (final["addressState"] == "VA"), "fips"
] = final.loc[
    (final["addressLocality"] == "Danville") & (final["addressState"] == "VA"), "fips"
].fillna(
    "51590"
)
final.loc[
    (final["addressLocality"] == "Bristol") & (final["addressState"] == "VA"),
    "addressCounty",
] = final.loc[
    (final["addressLocality"] == "Bristol") & (final["addressState"] == "VA"),
    "addressCounty",
].fillna(
    "Bristol City County"
)
final.loc[
    (final["addressLocality"] == "Bristol") & (final["addressState"] == "VA"), "fips"
] = final.loc[
    (final["addressLocality"] == "Bristol") & (final["addressState"] == "VA"), "fips"
].fillna(
    "51520"
)
final[["addressLocality", "addressState"]][
    final["fips"].isna() & ~final["addressCountry"].isna()
].drop_duplicates()

final_us = final[~final["addressCountry"].isna()]
final_us_complete = final_us[~final_us["fips"].isna()]


final_us[(final_us["fips"].isna()) & (final_us["addressCountry"] == "US")].to_csv(
    "Undetermined Location US.csv"
)

######## Summary for Clean ###############
summary_county = final_us_complete.groupby(
    ["fips", "addressCounty", "addressState"], as_index=False
)["fips"].value_counts()
summary_county.to_csv("County Counts Cancer Final US.csv", index=False)


def generate_lat_lon(df):
    df["lat"] = df["lon"] = np.nan
    zip_code = df["Provider Zip Code"]
    for ind, item in enumerate(zip_code):
        zipcode = search.by_zipcode(str(item))
        zip = zipcode.to_dict()
        df.loc[ind, "lat"] = zip["lat"]
        df.loc[ind, "lon"] = zip["lng"]
    return df


# Replace charges dtype as numeric
metric_list = [
    "Average Covered Charges",
    "Average Total Payments",
    "Average Medicare Payments",
]

for state_name in state:
    state_data = df[df["Provider State"] == state_name].reset_index()
    state_lat_lon = generate_lat_lon(state_data).dropna()
    for metric in metric_list:
        state_lat_lon[metric] = state_lat_lon[metric].apply(
            lambda x: x.replace("$", "")
        )
        state_lat_lon[metric] = state_lat_lon[metric].apply(
            lambda x: float(x.split()[0].replace(",", ""))
        )
    state_lat_lon.to_csv("df_{}_lat_lon.csv".format(state_name), index=False)
